POTD : 30 AUGUST 2023

EASY : 

SOLUTION : 

JAVA : 


MEDIUM : 

SOLUTION : https://www.codingninjas.com/studio/problem-details/prime-permutations_1462466

JAVA :

NOTE: DURING CODE 
import java.util.* ;
import java.io.*; 
public class Solution {
	public static int mod = (int)1e9+7;
	public static boolean check(int n){
		if(n==2)return true;
		// System.out.println(n);
		for(int i = 2; i<=n/2; i++){
			if(n%i==0)return false;
		}
		return true;
	}
	public static boolean[] sieve(int n){
		boolean arr[] = new boolean[n+1];
		Arrays.fill(arr,true);
		for(int i = 2; i*i<=n; i++){
			// System.out.println(i+" "+arr[i]);
			if(arr[i]){
				for(int j = i*i; j<=n; j+=i){
					// System.out.println(j);
					arr[j] = false;
				}
			}
		}
		return arr;
	}
	// public static long fact(long n){
	// 	if(n==0 || n==1)return n;
	// 	return (n*fact(n-1))%mod;
	// }
	public static int findPrimePermutations(int n) {
		// Write your code here.
		long count = 0;
		boolean arr[] = sieve(n);
		for(int i = 2; i<=n; i++){
			if(arr[i]){
				// System.out.println(i);
				count++;
				}
		}
		long res = 1;
		long none = n-count;
		for(long i = 2; i<=none; i++){
			res = (res*i)%mod;
		}
		for(long i = 2; i<=count; i++){
			res = (res*i)%mod;
		}
		// System.out.println(count+" "+none);
		// long fornone = fact(none);
		// return (int)(((fornone == 1?0:fornone)+fact(count))%mod);
		return (int)(res%mod);
	}

}

EXCAT  CODE : 

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int mod = (int)1e9+7;
	public static boolean[] sieve(int n){
		boolean arr[] = new boolean[n+1];
		Arrays.fill(arr,true);
		for(int i = 2; i*i<=n; i++){
			// System.out.println(i+" "+arr[i]);
			if(arr[i]){
				for(int j = i*i; j<=n; j+=i){
					// System.out.println(j);
					arr[j] = false;
				}
			}
		}
		return arr;
	}
	public static int findPrimePermutations(int n) {
		// Write your code here.
		long count = 0;
		boolean arr[] = sieve(n);
		for(int i = 2; i<=n; i++){
			if(arr[i])count++;
		}
		long res = 1;
		long none = n-count;
		for(long i = 2; i<=none; i++){
			res = (res*i)%mod;
		}
		for(long i = 2; i<=count; i++){
			res = (res*i)%mod;
		}
		return (int)(res%mod);
	}

}



HARD : https://www.codingninjas.com/studio/problems/merge-k-sorted-lists_992772

SOLUTION :  

JAVA :
//Not done with only LinkedList Need to know another approach
import java.util.*;

/****************************************************
	Following is the Node class for the Singly Linked List

		class LinkedListNode<Integer> {
			int data;
			LinkedListNode<Integer> next;

			public LinkedListNode(int data) {
				this.data = data;
			}
		}

****************************************************/

public class Solution {
    public static LinkedListNode<Integer> mergeKLists(LinkedListNode<Integer>[] listArray) {
        // Write your code here.
		LinkedListNode<Integer> res = new LinkedListNode<>(-1);
		ArrayList<Integer>al = new ArrayList<>();
		// Set<Integer>st = new TreeSet<>();
		PriorityQueue<Integer>pq = new PriorityQueue<>();
		int i = 0;
		for(LinkedListNode<Integer> temp : listArray){
			// LinkedListNode<Integer> temp = arr[i++];
			while(temp!=null){
				pq.add(temp.data);
				temp = temp.next;
			}
		}
		LinkedListNode<Integer> ans = res;
		while(!pq.isEmpty()){
			int val = pq.poll();
			LinkedListNode<Integer> temp = new LinkedListNode(val);
			res.next = temp;
			res = res.next;
		}
		return ans.next;
    }
}