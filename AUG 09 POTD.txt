POTD:

MEDIUM: https://www.codingninjas.com/studio/problems/lca-of-binary-tree_920541

SOLUTION: 
JAVA:


import java.util.ArrayList;

/************************************************************

 Following is the TreeNode class structure

 class TreeNode<T>
 {
     T data;
     TreeNode<T> left;
     TreeNode<T> right;

     TreeNode(T data)
     {
         this.data = data;
         left = null;
         right = null;
     }
 };

 ************************************************************/

public class Solution {
    static ArrayList<Integer> first = new ArrayList<Integer>();
    static ArrayList<Integer> second = new ArrayList<Integer>();
    public static void dfs(TreeNode<Integer>root, int x, int y, ArrayList<Integer>curr){
        if(root==null)return ;
        curr.add(root.data);
        if(root.data == x){
            first = new ArrayList<>(curr);
        }
        if(root.data == y){
            second = new ArrayList<>(curr);
        }
        dfs(root.left,x,y,curr);
        dfs(root.right,x,y,curr);
        curr.remove(curr.size()-1);
    }
    public static void print(ArrayList<Integer>ar){
        int n = ar.size();
        for(int i = 0; i<n; i++){
            System.out.print(ar.get(i)+" ");
        }
        System.out.println();
    }
    public static int lowestCommonAncestor(TreeNode<Integer> root, int x, int y) {
        //    Write your code here.
        if(root == null)return -1;
        dfs(root,x,y,new ArrayList<>());
        int n = first.size()<second.size()?first.size():second.size();
        int i = 0;
        int res = -1;
        while(i<n && first.get(i)==second.get(i)){
            res = first.get(i++);
        }
        return res;
    }
}
