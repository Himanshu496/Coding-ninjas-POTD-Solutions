POTD : 28 OCTOBER 2023

EASY : https://www.codingninjas.com/studio/problems/split-string_3744737

SOLUTION : 

JAVA : 

import java.util.* ;
import java.io.*; 
public class Solution {
    public static Boolean splitString(String str) {
        // Write your code here..
        int n = str.length();
        str = str.toLowerCase();
        int count1 = 0;
        int count2 = 0;
        for(int i = 0; i<n; i++){
            if(i<n/2)
                count1 = (str.charAt(i)=='a' || str.charAt(i)=='e' || str.charAt(i)=='i'
                    || str.charAt(i)=='o' || str.charAt(i)=='u')?count1+=1:count1;
            else 
                count2 = (str.charAt(i)=='a' || str.charAt(i)=='e' || str.charAt(i)=='i'
                    || str.charAt(i)=='o' || str.charAt(i)=='u')?count2+=1:count2;
        }
        return count1==count2;
    }

}

MEDIUM : https://www.codingninjas.com/studio/problems/add-two-numbers-as-linked-lists_1170520

SOLUTION : https://www.codingninjas.com/studio/problem-details/add-two-numbers-as-linked-lists_1170520

JAVA : 

import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the Node class:

    class LinkedListNode {
        int data;
        LinkedListNode next;
        
        public LinkedListNode(int data) {
            this.data = data;
        }
    }

*****************************************************************/


public class Solution {
    static LinkedListNode reverse(LinkedListNode head){
        LinkedListNode res = new LinkedListNode(-1);
        LinkedListNode ans = res;
        while(head!=null){
            LinkedListNode temp = head;
            head = head.next;
            temp.next = res;
            res = temp;
        }
        return ans.next;
    }
    static LinkedListNode addTwoNumbers(LinkedListNode head1, LinkedListNode head2) {
        // Write your code here.
        head1 = reverse(head1);
        head2 = reverse(head2);
        int carry = 0;
        LinkedListNode res = new LinkedListNode(-1);
        LinkedListNode ans = res;
        while(head1!=null || head2!=null || carry == 1){
            int temp = (head1!=null?head1.data:0) + (head2!=null?head2.data:0) + carry;
            res.next = new LinkedListNode(temp%10);
            carry = temp/10;
            head1 = head1!=null?head1.next:null;
            head2 = head2!=null?head2.next:null;
            res = res.next;
        }
        return reverse(ans.next);
    }
}