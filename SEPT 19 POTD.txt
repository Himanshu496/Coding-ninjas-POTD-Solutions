POTD : 19 SEPTEMBER 2023

EASY : https://www.codingninjas.com/studio/problems/check-pangram_893190

SOLUTION : https://www.codingninjas.com/studio/problem-details/check-pangram_893190

JAVA : 

import java.util.* ;
import java.io.*; 
public class Solution {
	
	public static boolean ninjaGram(String str) {

		// Write your code here
		boolean []check = new boolean[26];
		int n = str.length();
		if(n<26)return false;
		for(int i = 0; i<n; i++){
			check[Character.toLowerCase(str.charAt(i))-'a'] = true;
		}
		for(int i = 0; i<26; i++){
			if(!check[i])return false;
		}
		return true;
	}
}


MEDIUM : https://www.codingninjas.com/studio/problems/add-two-linked-lists_799487

SOLUTION : 

JAVA : 

import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the linked list node structure:
    
    class ListNode<T> {
 
		public T data;
		public ListNode<T> next;

		public ListNode(T data) {
			this.data = data;
		}
	}

************************************************************/

public class Solution {
	public static ListNode<Integer> reverse(ListNode<Integer> Node){
		ListNode<Integer>res = null;
		ListNode<Integer>ans = res;
		while(Node!=null){
			ListNode<Integer>first = ans;
			ListNode<Integer>temp = Node;
			Node = Node.next;
			temp.next = ans;
			ans = temp;
		}
		return ans;
	}
	public static ListNode<Integer> addTwoLists(ListNode<Integer> first, ListNode<Integer> second) {
		// Write your code here.
		ListNode<Integer>temp1 = reverse(first);
		ListNode<Integer>temp2 = reverse(second);
		ListNode<Integer>res = new ListNode<>(-1);
		int carry = 0;
		ListNode<Integer>trav = res;
		while(temp1!=null || temp2!=null || carry == 1){
			int sum = (temp1!=null?temp1.data:0) + (temp2!=null?temp2.data:0)+carry;
			carry = sum/10;
			trav.next = new ListNode<Integer>(sum%10);
			trav = trav.next;
			temp1 = temp1!=null?temp1.next:null;
			temp2 = temp2!=null?temp2.next:null;
		}
		return reverse(res.next);
	}
}